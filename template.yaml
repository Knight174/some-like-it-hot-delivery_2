AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Resources:
  AskDelivery:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ask-delivery.handler
      Runtime: nodejs8.10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - states:*
              Resource: !Ref DeliveryProcessor
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: '*'
      Environment: 
        Variables:
          TABLE_NAME: !Ref DeliveriesTable
          DELIVERY_STEP_FUNCTION: !Ref DeliveryProcessor
      Events:
        AskDeliveryApi:
          Type: Api
          Properties:
            Path: /delivery
            Method: POST
            RestApiId: !Ref AskDeliveryApi
  GetDelivery:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-delivery.handler
      Runtime: nodejs8.10
      Environment: 
        Variables:
          TABLE_NAME: !Ref DeliveriesTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: '*'
      Events:
        AskDeliveryApi:
          Type: Api
          Properties:
            Path: /delivery
            Method: GET
            RestApiId: !Ref AskDeliveryApi
  DeleteDelivery:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-delivery.handler
      Runtime: nodejs8.10
      Environment: 
        Variables:
          TABLE_NAME: !Ref DeliveriesTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: '*'
      Events:
        AskDeliveryApi:
          Type: Api
          Properties:
            Path: /delivery/{orderId}
            Method: DELETE
            RestApiId: !Ref AskDeliveryApi
  DeliveriesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: deliveryId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  DeliveryProcessor:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: DeliveryMachine
      DefinitionString: !Sub |
        {
          "Comment": "The Some Like It Hot Delivery State Machine",
          "StartAt": "ProcessDelivery",
          "Version": "1.0",
          "States": {
            "ProcessDelivery": {
              "Type": "Wait",
              "Seconds": 5,
              "Next": "NotifyDelivery"
            },
            "NotifyDelivery": {
              "Type": "Task",
              "Resource": "${NotifyDeliveries.Arn}",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt [ DeliveryStatesExecutionRole, Arn ]
  DeliveryStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
  NotifyDeliveries:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notify-delivery.handler
      Runtime: nodejs8.10
      Environment: 
        Variables:
          TABLE_NAME: !Ref DeliveriesTable
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: '*'
  AskDeliveryApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'prod'
      Cors:
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          /delivery:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AskDelivery.Arn}/invocations
                responses: {}
          /delivery/{orderId}:
            get:
              parameters:
                - in: path
                  name: orderId
                  schema:
                    type: string
                  required: true
                  description: String ID of the delivery to get  
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDelivery.Arn}/invocations
                responses: {}
            delete:
              parameters:
                - in: path
                  name: orderId
                  schema:
                    type: string
                  required: true
                  description: String ID of the delivery to delete  
              x-amazon-apigateway-integration:
                httpMethod: DELETE
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteDelivery.Arn}/invocations
                responses: {}
Outputs:
  ApiUrl:
    Description: The URL of the AskDeliveryApi endpoint 
    Value: !Sub "https://${AskDeliveryApi}.execute-api.${AWS::Region}.amazonaws.com/${AskDeliveryApi.Stage}/delivery"